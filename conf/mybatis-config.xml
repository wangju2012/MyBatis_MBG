<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!--
        作用：mybatis可以使用properties来引入外部properties配置文件内容
        resource:引入类路径下的资源
        url：引入网络路径或者磁盘路径下的资源
    -->
    <properties resource="dbconfig.properties"></properties>
    <!--
        2、settings包含多个重要的配置项
        setting用来设置每一个设置项
            name:设置项名
            value：设置项取值
    -->
    <settings>
        <setting name="mapUnderscoreToCamelCase" value="true"></setting>
        <setting name="jdbcTypeForNull" value="NULL"></setting>
        <!--显示的指定每个我们需要更改的配置的值，即使是默认的。防止版本更新带来问题-->
        <setting name="lazyLoadingEnabled" value="true"/>
        <setting name="aggressiveLazyLoading" value="false"/>
        <!--开启全局二级缓存-->
        <setting name="cacheEnabled" value="true"/>
    </settings>

    <!--
        3、:别名处理器，可以为java类型起别名
            type:指定要起别名的全类名；
            alias：指定新的别名，默认别名为类型小写
    -->
        <typeAliases>
            <!--<typeAlias type="com.wangju.mybatis.bean.Employee" alias="emp"/>-->
            <!--
                package:为某个包下的所有类批量起别名
                name：指定包名（为当前包及其子包中的每一个类起一个别名）
            -->
            <package name="com.wangju.mybatis.bean"/>
        </typeAliases>
    
    <!--
        4、environments，可以配置多种环境，Default来匹配程序要使用的环境，可以快速切换运行环境
            enviroment:配置一个具体的环境信息，必须有两个标签，id代表当前环境的唯一标识
                transactionManager:事务管理器
                    type：事务管理器类型（JDBC[JdbcTransationFactory]、MANAGED[ManagedTransationFactory]：使用J2EE服务器控制）
                    自定义事务管理器，需要实现Transaction接口，type要指向全类名
                dataSource:数据源
                    type：
                    [
                    UNPOOLED|不使用数据库连接池
                    POOLED|使用数据库连接池
                    JNDI
                    ]
                     自定义数据源：实现DataSourceFactory接口

    -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>

        <environment id="test">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>

    <!--
        5、databaseIdProvider:支持多数据库厂商
            type="DB_VENDOR"
            作用就是得到数据库厂商标识（驱动getDatabaseProductName()）,
    -->
    <databaseIdProvider type="DB_VENDOR">
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
        <property name="SQL Server" value="sqlserver"/>
    </databaseIdProvider>

    <!--将写好的sql映射文件（EmployeeMapper.xml）一定要注册到全局配置文件中（mybatis-config.xml）-->
    <mappers>
        <!--批量注册-->
        <!--此时需要将类和类的mapper文件放在同一个包下-->
        <!--<mapper resource="EmployeeMapper.xml"/>-->
        <!--<mapper class="com.wangju.mybatis.dao.EmployeeMapper"/>-->
        <package name="com.wangju.mybatis.dao"/>

    </mappers>

    <!--<mapper class="com.wangju.mybatis.dao.EmployeeMapperAnnotation"/>-->
    <!--路径为类路径下-->
    <!--<mapper resource="mybatis/mapper/EmployeeMapper.xml"/>-->
    <!--注册接口：
               class：引用接口
               1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下
               2、没有sql映射文件，所有的sql都是利用注解写在接口上
           -->
    <!---->


</configuration>